<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>

<script>
	$(function() {
		var localVideo = document.querySelector('#localVideo');
		var remoteVideo = document.querySelector('#remoteVideo');

		var localStream;
		var remoteStream;
		var pc;
		var isStarted = false;

		let mediaConstraints = {
			audio: true,
			video: true
		}

		var pcConfig = {{{ DisplayJSON stunServer }}};

		let captureLocalStreamVideo = () => {
			return new Promise((resolve, reject) => {
				if (navigator.mediaDevices.getUserMedia) {
					navigator.mediaDevices.getUserMedia(mediaConstraints)
						.then((stream) => {
							return resolve(stream);
						}).catch((e) => {
							return reject(e);
						});
				} else {
					alert("Your browser is not Web RTC Supported");
				}
			});
		};

		let createPeerConnection = (callObj) => {
			try {
				pc = new RTCPeerConnection(pcConfig);
				pc.onicecandidate = (event) => {
					console.log("ice candidate event");
					if (event.candidate) {
						console.log("sending ice candidate")
						let iceObj = {
							type: 'candidate',
							label: event.candidate.sdpMLineIndex,
							id: event.candidate.sdpMid,
							candidate: event.candidate.candidate,
							callFrom: callObj.callFrom,
							callTo: callObj.callTo,
							callUniqueId: callObj.callUniqueId
						}
						socket.emit('call:icecandidate', iceObj);
					} else {
						console.log('End of candidates.', event);
					}
				}

				pc.oniceconnectionstatechange = (event) => {
					console.log("Ice connection state change", event.target.iceConnectionState);
					if (event.target.iceConnectionState === "failed" ||
						event.target.iceConnectionState === "disconnected" ||
						event.target.iceConnectionState === "closed") {
						endCall();
					}
				};

				pc.onaddstream = (event) => {
					//handle Remote Stream added
					console.log('Remote stream added.');
					remoteStream = event.stream;
					remoteVideo.srcObject = remoteStream;
				};

				pc.onremovestream = (event) => {
					//handle Remote Stream removed
					console.log('Remote stream removed.');
				};

				console.log('Created RTCPeerConnnection');
			} catch (e) {
				console.log('Failed to create PeerConnection, exception: ' + e.message);
				alert('Cannot create RTCPeerConnection object.');
				return;
			}
		}

		socket.on('connect', () => {
			const urlParams = new URLSearchParams(window.location.search);
			const initQueryString = urlParams.get('callInitiator');
			const initCallFrom = urlParams.get('callFrom');
			const initCallTo = urlParams.get('callTo');

			if (initQueryString === 'true' && initCallFrom) {
				dialToneAudio.play();
				let callerCallObj = localStorage.getItem('callerParams');
				callerCallObj = JSON.parse(callerCallObj);
				captureLocalStreamVideo()
					.then((stream) => {
						console.log('Adding local stream to caller local Video Id.');
						localStream = stream;
						localVideo.srcObject = stream;
						$('#onMic').show();
						$('#muteMic').hide();
						localStream.getAudioTracks()[0].enabled = true;
						return socket.emit('call:init', callerCallObj);
					}).catch((e) => {
						console.log(e);
						alert('getUserMedia() error: ' + e.name);
					});
			} else if (initQueryString === 'false' && initCallTo) {
				let calleeCallObj = localStorage.getItem('calleeParams');
				calleeCallObj = JSON.parse(calleeCallObj);
				captureLocalStreamVideo()
					.then((stream) => {
						console.log('Adding local stream to callee local Video Id.');
						localStream = stream;
						localVideo.srcObject = stream;
						$('#onMic').show();
						$('#muteMic').hide();
						localStream.getAudioTracks()[0].enabled = true;
						return socket.emit('call:join', calleeCallObj);
					}).catch((e) => {
						console.log(e);
						alert('getUserMedia() error: ' + e.name);
					});
			}

			socket.on('call:joined', (callObj) => {
				if (!callObj.isInitiator) {
					console.log("Callee Joined the Room with caller", callObj);
					return socket.emit('call:accepted', callObj);
				}
				return console.log("Caller created and joined the room", callObj);
			});

			socket.on('call:accepted', (callObj) => {
				console.log("caller knows call Accepted by the callee", callObj);
				dialToneAudio.pause();
				createPeerConnection(callObj);
				pc.addStream(localStream);
				isStarted = true;

				pc.createOffer().then((sdp) => {
					pc.setLocalDescription(sdp);
					console.log("got offer & sending", sdp);
					let offerObj = {
						type: sdp.type,
						sdp: sdp.sdp,
						callFrom: callObj.callFrom,
						callTo: callObj.callTo,
						callUniqueId: callObj.callUniqueId
					}
					socket.emit('call:offer', offerObj);
				}).catch((error) => {
					console.log('Failed to create offer session description: ' + error.toString());
				});

			});

			socket.on('call:icecandidate', (iceObj) => {
				console.log("receiving ice candidate", iceObj);
				if (isStarted) {
					console.log("applying ice candidate ...");
					let candidate = new RTCIceCandidate({
						sdpMLineIndex: iceObj.label,
						candidate: iceObj.candidate
					});
					pc.addIceCandidate(candidate);
				}
			});

			socket.on('call:offer', (offerObj) => {
				console.log("received offer ...", offerObj);
				createPeerConnection(offerObj);
				pc.addStream(localStream);
				isStarted = true;

				pc.setRemoteDescription(new RTCSessionDescription(offerObj));

				pc.createAnswer().then((sdp) => {
					pc.setLocalDescription(sdp);
					console.log("got answer Obj & sending", sdp)
					let answerObj = {
						type: sdp.type,
						sdp: sdp.sdp,
						callFrom: offerObj.callFrom,
						callTo: offerObj.callTo,
						callUniqueId: offerObj.callUniqueId
					}
					socket.emit('call:answer', answerObj);
				}).catch((error) => {
					console.log('Failed to create answer session description: ' + error.toString());
				});
			});

			socket.on('call:answer', (answerObj) => {
				console.log("Received Answer ...", answerObj);
				pc.setRemoteDescription(new RTCSessionDescription(answerObj));
			});

		});

		$('#endCall').click(function() {
			endCall();
		});

		let endCall = () => {
			let callObj = {};
			if (localStorage.getItem('callerParams')){
				callObj.callUniqueId = JSON.parse(localStorage.getItem('callerParams')).callUniqueId;
				callObj.userId = JSON.parse(localStorage.getItem('callerParams')).callTo;
			}

			if (localStorage.getItem('calleeParams')){
				callObj.callUniqueId = JSON.parse(localStorage.getItem('calleeParams')).callUniqueId;
				callObj.userId = JSON.parse(localStorage.getItem('calleeParams')).callFrom;
			}
			
			socket.emit('call:leave', callObj);
			closePeerConnection();
		}

		let closePeerConnection = () => {
			if (pc) {
				pc.close();
				pc = null;
			}
			stopVideo();
		};

		let stopVideo = () => {
			if (remoteVideo) {
				remoteVideo.pause();
				remoteVideo.srcObject = null;
			}

			if (remoteStream && remoteStream.getTracks && remoteStream.getTracks().length > 0) {
				let track = remoteStream.getTracks()[0];
				track.stop();
			}

			if (remoteStream && remoteStream.getVideoTracks && remoteStream.getVideoTracks().length > 0) {
				let track = remoteStream.getVideoTracks()[0];
				track.stop();
			}

			if (localVideo) {
				localVideo.pause();
				localVideo.srcObject = null;
			}

			if (localStream && localStream.getTracks && localStream.getTracks().length > 0) {
				let track = localStream.getTracks()[0];
				track.stop();
			}

			if (localStream && localStream.getVideoTracks && localStream.getVideoTracks().length > 0) {
				let track = localStream.getVideoTracks()[0];
				track.stop();
			}

			if (localStorage.getItem('callerParams')) {
				let locationPath = JSON.parse(localStorage.getItem('callerParams')).location;
				localStorage.removeItem('callerParams');
				window.location.href = locationPath;
			}

			if (localStorage.getItem('calleeParams')) {
				let locationPath = JSON.parse(localStorage.getItem('calleeParams')).location;
				localStorage.removeItem('calleeParams');
				window.location.href = locationPath;	
			}
		};

		$('#micMute').click(function() {
			$('#onMic').show();
			$('#muteMic').hide();
			localStream.getAudioTracks()[0].enabled = true;
		});

		$('#micOn').click(function() {
			$('#onMic').hide();
			$('#muteMic').show();
			localStream.getAudioTracks()[0].enabled = false;
		});

	});
</script>


{{> header/top-header LoggedInUser = LoggedInUser}}
{{> vendor/vendor-menu}}

<div class="wrapper-content bg-gray">
	<div class="gtc-container">
		<div class="row">
			<div class="col-sm-2">
				{{> vendor/vendor-side-navbar}}
			</div>
			<div class="col-sm-10">
				<div class="ibox">
					<div class="ibox-content">
						<div class="ibox-title">
							<h2>Web rtc peer to peer</h2>
						</div>
						<br />
						<div class="content-body">
							<div class="row">
								<div class="col-md-10">
									<div id="videos" class="active embed-responsive embed-responsive-16by9">
										<video id="localVideo" class="active" autoplay muted playsinline></video>
										<video id="remoteVideo" autoplay playsinline></video>
									</div>

									<center>

									<a style="cursor:pointer">
										<img src="../img/video-call/call-end.png" class="remote-video-icon1" popover="End Call" id="endCall" popover-trigger="mouseenter">
									</a>

			             			<a style="cursor:pointer" id="onMic">
			             				<img src="../img/video-call/microphone.png" class="remote-video-icon2" popover="Mute" id="micOn" popover-trigger="mouseenter">
			             			</a>

									<a style="cursor:pointer" id="muteMic">
			             				<img src="../img/video-call/mutedmic.png" class="remote-video-icon2" popover="Un mute" id="micMute" popover-trigger="mouseenter">
			             			</a>


									</center>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
{{> footer/bottom-footer}}

<style>
	#videos {
		transition: all 1s;
	}

	#videos.active {
		-moz-transform: rotateY(180deg);
		-ms-transform: rotateY(180deg);
		-o-transform: rotateY(180deg);
		-webkit-transform: rotateY(180deg);
		transform: rotateY(180deg);
	}

	#localVideo {
		border: 1px solid gray;
		bottom: 20px;
		left: 20px;
		top: unset;
		max-height: 20%;
		max-width: 14.9%;
		opacity: 0;
		transition: opacity 1s;
		background-color: #000000;
	}

	#localVideo.active {
		opacity: 1;
		z-index: 2;
	}

	#remoteVideo {
		height: 100%;
		max-height: 100%;
		max-width: 100%;
		object-fit: cover;
		-moz-transform: scale(-1, 1);
		-ms-transform: scale(-1, 1);
		-o-transform: scale(-1, 1);
		-webkit-transform: scale(-1, 1);
		transform: scale(-1, 1);
		transition: opacity 1s;
		width: 100%;
		background-color: #000000;
	}

	.remote-video-icon1 {
		height: auto;
		background-color: transparent;
		position: absolute;
		margin-left: -80px;
		bottom: 30px;
		width: 100px;
	}

	.remote-video-icon2 {
	    background-color: transparent;
	    position: absolute;
	    margin-left: 0px;
	    bottom: 36px;
	    width: 30px;
	    height: 27px;
	}
</style>